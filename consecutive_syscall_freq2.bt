#!/usr/bin/env bpftrace

BEGIN
{
    printf("Recording syscalls in sequential frequency format, excluding writes to syscall_output.txt...\n");
}

// Track the file descriptor for "syscall_output.txt"
tracepoint:syscalls:sys_enter_openat
/str(args->filename) == "syscall_output.txt"/
{
    @output_fd[tid] = retval;  // Store the file descriptor for each thread
}

// Tracepoint for write syscalls, excluding writes to syscall_output.txt
tracepoint:raw_syscalls:sys_enter
{
    if (args->id == 1) {  // Check if it's a `write` syscall (ID 1)
        // Ignore write syscalls to syscall_output.txt
        if (@output_fd[tid] == args->fd) {
            return;
        }
    }

    // Track syscalls as usual
    if (@last_syscall[tid] == args->id) {
        @repetition_count[tid] += 1;
    } else {
        if (@last_syscall[tid] != 0) {
//            printf("Syscall ID %d repeated %d times\n", @last_syscall[tid], @repetition_count[tid]);
        }
        @last_syscall[tid] = args->id;
        @repetition_count[tid] = 1;
    }
}

END
{
    printf("\nEnding session and printing:\n");

    //for (tid in @last_syscall) {
    //    printf("Syscall ID %d repeated %d times\n", @last_syscall[tid], @repetition_count[tid]);
    //}

    clear(@last_syscall);
    clear(@repetition_count);
    clear(@output_fd);
}
